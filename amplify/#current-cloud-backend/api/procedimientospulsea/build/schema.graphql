type Procedures {
  id: ID!
  procedure: String
  code: String
  claimed: Float
  difference: Float
  authorized: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProceduresConnection {
  items: [Procedures]!
  nextToken: String
}

input ModelProceduresFilterInput {
  id: ModelIDInput
  procedure: ModelStringInput
  code: ModelStringInput
  claimed: ModelFloatInput
  difference: ModelFloatInput
  authorized: ModelFloatInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProceduresFilterInput]
  or: [ModelProceduresFilterInput]
  not: ModelProceduresFilterInput
}

type Query {
  getProcedures(id: ID!): Procedures
  listProcedures(filter: ModelProceduresFilterInput, limit: Int, nextToken: String): ModelProceduresConnection
}

input ModelProceduresConditionInput {
  procedure: ModelStringInput
  code: ModelStringInput
  claimed: ModelFloatInput
  difference: ModelFloatInput
  authorized: ModelFloatInput
  and: [ModelProceduresConditionInput]
  or: [ModelProceduresConditionInput]
  not: ModelProceduresConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateProceduresInput {
  id: ID
  procedure: String
  code: String
  claimed: Float
  difference: Float
  authorized: Float
}

input UpdateProceduresInput {
  id: ID!
  procedure: String
  code: String
  claimed: Float
  difference: Float
  authorized: Float
}

input DeleteProceduresInput {
  id: ID!
}

type Mutation {
  createProcedures(input: CreateProceduresInput!, condition: ModelProceduresConditionInput): Procedures
  updateProcedures(input: UpdateProceduresInput!, condition: ModelProceduresConditionInput): Procedures
  deleteProcedures(input: DeleteProceduresInput!, condition: ModelProceduresConditionInput): Procedures
}

input ModelSubscriptionProceduresFilterInput {
  id: ModelSubscriptionIDInput
  procedure: ModelSubscriptionStringInput
  code: ModelSubscriptionStringInput
  claimed: ModelSubscriptionFloatInput
  difference: ModelSubscriptionFloatInput
  authorized: ModelSubscriptionFloatInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProceduresFilterInput]
  or: [ModelSubscriptionProceduresFilterInput]
}

type Subscription {
  onCreateProcedures(filter: ModelSubscriptionProceduresFilterInput): Procedures @aws_subscribe(mutations: ["createProcedures"])
  onUpdateProcedures(filter: ModelSubscriptionProceduresFilterInput): Procedures @aws_subscribe(mutations: ["updateProcedures"])
  onDeleteProcedures(filter: ModelSubscriptionProceduresFilterInput): Procedures @aws_subscribe(mutations: ["deleteProcedures"])
}
